year.month1.week1.day7
一.连接图所有节点最短路径
1.Prim (minList记录距离最小生成树最短长度)
2.Kruskal (稀疏图, 边排序后用并查集)

二.两点之间最短路径
1.Dijkstra (朴素, minList记录距离源点最短长度)(两点之间需连通)(无负权)
2.Dijkstra (稀疏图, 用优先队列排序边, 用领接表表示图)(无负权)
3.Bellman_Ford (适用有负数的情况, 动态规划, n-1次松弛(更新minList))(无负权回路)
3.Bellman_Ford_Queue_Improved_SPFA (适用有负数的情况, 动态规划, 只对上一次松弛的点连接的边松弛, 用队列记录点并用boolean[]记录该点已进队列)(无负权回路)
4.Bellman_Ford_II (用最基础的Bellman_Ford和队列优化的都可以, 第n次松弛或者在第n次添加节点时, 判断minList是否有变来找出负权回路)(有负权回路)
5.Bellman_Ford_Limited_k (限定经过k点, 使用preMinList对所有边松弛k+1次; SPFA也差不多(控制在k+1次, 通过计算个数限制只松弛每层节点))(有负权回路)

三.多源点
1.Floyd (适合稠密图, 源点越多越适合(全源点), dp[i][j][k]:i到j经过1..k节点的最短路径, Math.min(dp[i][j][k-1],dp[i][k][k-1]+dp[k][j][k-1])有无经过k点两种情况)(有负权)
2.优先队列Dijkstra (适合大图和稀疏图, 自己想的)(无负权)

四.网格步数
1.A* (一般的广搜都能用A*优化, 用优先队列和启发式函数和f=g+h来优化广搜)(不能用于多目标找最近)

五.重点
1.优先队列Dijkstra (无负)
2.Bellman_Ford的SPFA (有负有负回路) 1.有负回路直接判断第n次minList的改变; 2.限定k, 直接控制松弛k+1次(用preMinList不能让前面的结果影响当前层)